{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#motivation","title":"Motivation","text":"<p>The detectron2 API is incredible, but the documentation and response to GitHub issues are incredibly bad. </p> <p>This is very wasteful, and felt like an easy thing to start fixing. </p>"},{"location":"#about-me","title":"About Me","text":"<p>2 years in Medical Imaging startup, now working in AI for Waste Management / Recycling. </p> <p>Tutorials have been written with a lot of help from Jack Tattershall (https://www.linkedin.com/in/jack-tattershall-9bb972190). A very old friend who meandered his way to Computer Vision alongside me.</p>"},{"location":"deployment/intro/","title":"intro","text":""},{"location":"deployment/intro/#how-to-deploy-models-trained-with-detectron2","title":"How to Deploy Models Trained with Detectron2","text":"<p>The repo comes with an unassuming script called export_model.py, it uses the rest of the package just as an API, and can be used as a standalone script or copied into your own repo (so that you don't have to clone detectron2).</p> <p>It is overly verbose, so I've rewritten the core parts below with typer instead of python's default parser.  It also just runs from a config.yaml (can obviously change the path to the weights here), but for my workflows that would normally point to the original weights that I started training from. Not my best checkpoint. So I added an additional argument to point to those trained weights.</p> <pre><code>import typer \n\ndef main(\n        export_format: str = 'torchscript',\n        architecture_name: str = 'R101',\n        checkpoint_path: str = None,\n    ): \n    DetectionCheckpointer()\n\nif __name__ == '__main__':\n    typer.run(main)\n</code></pre>"},{"location":"deployment/intro/#deployment","title":"Deployment","text":""},{"location":"deployment/intro/#options","title":"Options","text":"<ul> <li>Torchscript </li> <li>Gotchas </li> <li>Make sure to import torchscript before reloading the saved model </li> <li> <p>Show what would be hit, show successful reload. </p> </li> <li> <p>ONNX </p> </li> <li>Because it's a 'universal' framework, it offers thje most functionality wrt further optimizations (e.g. operator fusing or conversion to fp16 or int8) </li> </ul>"},{"location":"deployment/intro/#preprocessing","title":"Preprocessing","text":"<p>Within detectron2 preprocessing is managed by a predictor object, but if you're using torchscript or ONNX, you're trying to remove your  dependence on detectron2. In order to achieve this aim I simply extracted the preprocessing code from the predictor object.</p>"},{"location":"deployment/onnx/","title":"onnx","text":"<p>onnx</p>"},{"location":"deployment/torchscript/","title":"torchscript","text":"<p>torchscript</p>"}]}